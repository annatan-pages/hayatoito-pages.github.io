.. -*- mode: rst; coding: utf-8 -*-

====================================
SRM276 - お買い物は楽しくDPで
====================================

:slug: srm276
:date: 2005-12-09

.. meta::
  :edituri: http://www.blogger.com/feeds/15880554/posts/default/113477976267174273
  :published: 2005-12-09T02:28:49+09:00

  :replace_{RD}: 8073
  :replace_{RM}: 246939
  :replace_{PM1}: 5945
  :replace_{PM2}: 4634
  :replace_{PM3}: 5934


SRM276__ に挑戦．
かなーり，眠かったので，スルーしようかと思ったのですが，挑戦しました．

__ http://www.topcoder.com/stat?c=round_overview&rd=8073


VolumeDiscount__ (code__)
===========================

__ http://www.topcoder.com/stat?c=problem_statement&pm=5945&rd=8073
__ http://www.topcoder.com/stat?c=problem_solution&rm=246939&rd=8073&pm=5945&cr=15632820

250点問題．
お買い物です．たとえば，

* 1個なら4$
* 3個まとめて買うと10$
* 20個まとめて買うと48$

だったとします．50個，買いたいとします．最低何$ですむか？という問題です.
この例だと

  20個 x 2 + 3個 x 3 + 1個 x 1= 50個 (48$ x 2 + 10$ x 3 + 4$ x 1 = 130$)

がベストな買い方で，答えは 130 です．
しかし，50個ではなく，55個買いたいとすると，ベストな買い方は

  20個 x 2 + 3個 x 5 = 55個 (48$ x 2 + 10$ x 5 = 146$)

ではなく

  20個 x 3 = 60個 ( 48$ x 3 = 144$)

です．答えは，144 になります．
SRM中は，入力条件が緩いのでBrute-Forceで十分いけると思ってSubmitしました．
チャレンジタイムでは，MemoizationなしのBrute-Forceではタイムアウトすると思われたのか,
2回チャレンジをうけました．チャレンジで使用された入力は

.. image:: http://static.flickr.com/39/74265649_2eb414d63b_o.png
   :alt: SRM276 Challenge

と明らかに2秒タイムオーバー狙いです．
チャレンジタイム後に，チャレンジしてきた人に質問されました．
2秒以内に終わったのが，信じられなかったようです.

.. image:: http://static.flickr.com/36/74263840_738db61dae_o.png
   :alt: SRM276 Chat

その後, HiltonLange さんには，さらに

  {"51 1","1 99"}, 99 だと，失敗するんじゃない？

と指摘されました．
そのとおりです．この入力だと51個x2=101個，2ドルが正解ですが，SubmitしたCodeでは

.. code-block:: java

     for (int i = 0; q + i * unit[n] < 100; i++) {

このように上限を100にしていたため，51 x 1 + 99 * 48 = 4803ドルを出力していまいます．
上限は，最低200じゃないと．System Testに落ちますね．．．

.. code-block:: java

     for (int i = 0; q + i * unit[n] < 200; i++) {

このように上限200にしておくと，2秒近くかかりますが，なんとかSystem Testに通っていました．
それでも無駄だらけなので，無駄をなくすと共に，Memoizationを併用すれば，劇的に早くなります．
以下のようになります．

.. code-block:: java

  int go(int q, int n) {
     if (n == N) {
         if (q < quantity) return 1000000;
         return 0;
     }
     if (cache[q][n] != 0) return cache[q][n];
     int min = Integer.MAX_VALUE;
     for (int i = 0;; i++) {
         min = Math.min(min, cost[n] * i + go(q + unit[n] * i, n+1));
         if (q + i * unit[n] >= quantity) break;
     }
     return cache[q][n] = min;
  }

この手の問題は，やはりDP(Dynamic Programming)を使うのが常套手段でしたね．
SRM後に書いてみました.

.. code-block:: java

 public int bestDeal(String[] priceList, int quantity) {
     int N = priceList.length;
     int[] unit = new int[N];
     int[] cost = new int[N];
     for (int i = 0; i < N; i++) {
         unit[i] = Integer.parseInt(priceList[i].split(" ")[0]);
         cost[i] = Integer.parseInt(priceList[i].split(" ")[1]);
     }

     int[] best = new int[300];
     Arrays.fill(best, Integer.MAX_VALUE);
     best[0] = 0;
     for (int i = 0; i < N; i++) {
         for (int j = 0; j < quantity; j++) {
             if (best[j] != Integer.MAX_VALUE) {
                 if (best[j] + cost[i] < best[j + unit[i]]) {
                     best[j+unit[i]] = best[j] + cost[i];
                 }
             }
         }
     }

     int min = Integer.MAX_VALUE;
     for (int i = quantity; i < quantity + 100; i++) {
         min = Math.min(min, best[i]);
     }
     return min;
 }

ほとんどの人は，さくっと躊躇することなくDPを使用していました．さすが，Division1．


TestingCar__
============

__ http://www.topcoder.com/stat?c=problem_statement&pm=4634&rd=8073

500点問題．
レーシングカーの試験走行をします．
ただし，時間帯により制限速度の条件がいくつか与えられます.

* [5秒から10秒の間は，10 m/s以上スピードを出してはいけない ]
* [15秒から20秒の間は，15 m/s以上スピードを出してはいけない ]
* [30秒から40秒の間は，5 m/s以上スピードを出してはいけない ]

というふうにです．
入力として

* レーシングカーの加速度 a (m / s^2 )  (減速度(?) も兼ねています．）
* 試験走行の時間 (duratation) が与えられます.

この条件のもとで，レーシングカーが出せる最高速度はいくつになるかという問題です.
SRM中は，途中で方針が間違っていたことことにきずき，お手上げでした．
（つぎのつぎの制限速度の変更を考慮していなかったため減速が間に合わない．）


ForceTest__
===========

__ http://www.topcoder.com/stat?c=problem_statement&pm=5934&rd=8073

1000点問題．
Openしませんでした．


結果
====

System Testの結果です．
( `Room Statistics`__ )

__ http://www.topcoder.com/stat?c=coder_room_stats&cr=15632820&rd=8073&rm=246939

.. image:: http://static.flickr.com/9/74683887_7179f797b8_o.png
   :alt: Room Statistics

レーティングは低下．今日は，敗北感が強いな．．


今日の教訓
==========

* DPをちゃんとマスターしておく
